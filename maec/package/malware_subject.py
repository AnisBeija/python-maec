#MAEC Malware Subject Class

#Copyright (c) 2014, The MITRE Corporation
#All rights reserved

#Compatible with MAEC v4.1
#Last updated 08/20/2014

import cybox
from cybox.common import VocabString, PlatformSpecification, ToolInformationList, ToolInformation
from cybox.objects.file_object import File
from cybox.objects.uri_object import URI
from cybox.core import Object

import maec
import maec.bindings.maec_package as package_binding
from maec.bundle.bundle import Bundle
from maec.package.action_equivalence import ActionEquivalenceList
from maec.package.analysis import Analysis
from maec.package.malware_subject_reference import MalwareSubjectReference
from maec.package.object_equivalence import ObjectEquivalenceList

class MinorVariants(maec.EntityList):
    _contained_type = Object
    _binding_class = package_binding.MinorVariantListType
    _binding_var = "Minor_Variant"
    _namespace = maec.package._namespace
    
class Analyses(maec.EntityList):
    _contained_type = Analysis
    _binding_class = package_binding.AnalysisListType
    _binding_var = "Analysis"
    _namespace = maec.package._namespace

class MalwareSubjectRelationship(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareSubjectRelationshipType
    _namespace = maec.package._namespace

    malware_subject_reference = cybox.TypedField("maleware_subject_reference", MalwareSubjectReference, multiple = True)
    type = cybox.TypedField("type", VocabString)

    def __init__(self):
        super(MalwareSubjectRelationship, self).__init__()
        self.type = None
        self.malware_subject_reference = []


class MalwareSubjectRelationshipList(maec.EntityList):
    _contained_type = MalwareSubjectRelationship
    _binding_class = package_binding.MalwareSubjectRelationshipListType
    _binding_var = "Relationship"
    _namespace = maec.package._namespace

class MetaAnalysis(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MetaAnalysisType
    _namespace = maec.package._namespace

    action_equivalences = cybox.TypedField("action_equivalences", ActionEquivalenceList)
    object_equivalences = cybox.TypedField("object_equivalences", ObjectEquivalenceList)

    def __init__(self):
        super(MetaAnalysis, self).__init__()
        self.action_equivalences = None
        self.object_equivalences = None

class FindingsBundleList(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.FindingsBundleListType
    _namespace = maec.package._namespace

    meta_analysis = cybox.TypedField("meta_analysis", MetaAnalysis)
    bundle = cybox.TypedField("bundle", Bundle)
    bundle_external_reference = cybox.TypedField("bundle_external_reference", multiple = True)

    def __init__(self):
        super(FindingsBundleList, self).__init__()
        self.meta_analysis = None
        self.bundle = []
        self.bundle_external_reference = []

    def add_bundle(self, bundle):
        self.bundle.append(bundle)

    def add_bundle_external_reference(self, bundle_external_reference):
        self.bundle_external_reference.append(bundle_external_reference)

class MalwareDevelopmentEnvironment(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareDevelopmentEnvironmentType
    _namespace = maec.package._namespace

    tools = cybox.TypedField("tools", ToolInformation)
    debugging_file = cybox.TypedField("debugging_file", File, multiple = True)

    def __init__(self):
        super(MalwareDevelopmentEnvironment, self).__init__()
        self.tools = None
        self.debugging_file = None


class MalwareConfigurationParameter(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareConfigurationParameterType
    _namespace = maec.package._namespace

    name = cybox.TypedField("name", VocabString)
    value = cybox.TypedField("value")

    def __init__(self):
        super(MalwareConfigurationParameter, self).__init__()
        self.name = None
        self.value = None


class MalwareBinaryConfigurationStorageDetails(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareBinaryConfigurationStorageDetailsType
    _namespace = maec.package._namespace

    file_offset = cybox.TypedField("file_offset")
    section_name = cybox.TypedField("section_name")
    section_offset = cybox.TypedField("section_offset")

    def __init__(self):
        super(MalwareBinaryConfigurationStorageDetails, self).__init__()
        self.file_offset = None
        self.section_name = None
        self.section_offset = None

class MalwareConfigurationStorageDetails(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareConfigurationStorageDetailsType
    _namespace = maec.package._namespace

    malware_binary = cybox.TypedField("malware_binary", MalwareBinaryConfigurationStorageDetails)
    file = cybox.TypedField("file", File)
    url = cybox.TypedField("url", URI, multiple = True)

    def __init__(self):
        super(MalwareConfigurationStorageDetails, self).__init__()
        self.malware_binary = None
        self.file = None
        self.url = []

class MalwareConfigurationObfuscationAlgorithm(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareConfigurationObfuscationAlgorithmType
    _namespace = maec.package._namespace

    ordinal_position = cybox.TypedField("ordinal_position")
    key = cybox.TypedField("key")
    algorithm_name = cybox.TypedField("algorithm_name", VocabString)

    def __init__(self):
        super(MalwareConfigurationObfuscationAlgorithm, self).__init__()
        self.ordinal_position = None
        self.key = None
        self.algorithm_name = None


class MalwareConfigurationObfuscationDetails(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareConfigurationObfuscationDetailsType
    _namespace = maec.package._namespace

    is_encoded = cybox.TypedField("is_encoded")
    is_encrypted = cybox.TypedField("is_encrypted")
    algorithm_details = cybox.TypedField("algorithm_details", MalwareConfigurationObfuscationAlgorithm, multiple = True)

    def __init__(self):
        super(MalwareConfigurationObfuscationDetails, self).__init__()
        self.is_encoded = None
        self.is_encrypted = None
        self.algorithm_details = []


class MalwareConfigurationDetails(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareConfigurationDetailsType
    _namespace = maec.package._namespace

    storage = cybox.TypedField("storage", MalwareConfigurationStorageDetails)
    obfuscation = cybox.TypedField("obfuscation", MalwareConfigurationObfuscationDetails)
    configuration_parameter = cybox.TypedField("configuration_parameter", MalwareConfigurationParameter, multiple = True)

    def __init__(self):
        super(MalwareConfigurationDetails, self).__init__()
        self.storage = None
        self.obfuscation = None
        self.configuration_parameter = []

class MalwareSubject(maec.Entity):
    _binding = package_binding
    _binding_class = package_binding.MalwareSubjectType
    _namespace = maec.package._namespace

    id = cybox.TypedField("id")
    malware_instance_object_attributes = cybox.TypedField("malware_instance_object_attributes", Object)
    label = cybox.TypedField("label", VocabString, multiple=True)
    configuration_details = cybox.TypedField("configuration_details", MalwareConfigurationDetails)
    minor_variants = cybox.TypedField("minor_variants", MinorVariants)
    development_environment = cybox.TypedField("development_environment", MalwareDevelopmentEnvironment)
    #field_data = cybox.TypedField("field_data") # TODO: support metadata:fieldDataEntry
    analyses = cybox.TypedField("analyses", Analyses)
    findings_bundles = cybox.TypedField("findings_bundles", FindingsBundleList)
    relationships = cybox.TypedField("relationships", MalwareSubjectRelationshipList)
    compatible_platform = cybox.TypedField("compatible_platform", PlatformSpecification, multiple=True)

    def __init__(self, id = None, malware_instance_object_attributes = None):
        super(MalwareSubject, self).__init__()
        if id:
            self.id = id
        else:
            self.id = maec.utils.idgen.create_id(prefix="malware_subject")
        #Set the Malware Instance Object Attributes (a CybOX object) if they are not none
        self.malware_instance_object_attributes = malware_instance_object_attributes

    #Public methods
    #Set the Malware_Instance_Object_Attributes with a CybOX object
    def set_malware_instance_object_attributes(self, malware_instance_object_attributes):
        self.malware_instance_object_attributes = malware_instance_object_attributes

    #Add an Analysis to the Analyses
    def add_analysis(self, analysis):
        self.analyses.append(analysis)

    def get_analyses(self):
        return self.analyses

    #Get all Bundles in the Subject
    def get_all_bundles(self):
        return self.findings_bundles.bundles

    #Add a MAEC Bundle to the Findings Bundles
    def add_findings_bundle(self, bundle):
        self.findings_bundles.add_bundle(bundle)

    def deduplicate_bundles(self):
        """DeDuplicate all Findings Bundles in the Malware Subject. For now, only handles Objects"""
        for findings_bundle in self.findings_bundles.bundles:
            findings_bundle.deduplicate()

    def dereference_bundles(self):
        """Deference all Findings Bundles in the Malware Subject. For now, only handles Objects"""
        all_bundles = self.get_all_bundles()
        for bundle in all_bundles:
            bundle.dereference_objects([self.malware_instance_object_attributes])

    def normalize_bundles(self):
        """Normalize all Findings Bundles in the Malware Subject. For now, only handles Objects"""
        all_bundles = self.get_all_bundles()
        for bundle in all_bundles:
            bundle.normalize_objects()
            
class MalwareSubjectList(maec.EntityList):
    _contained_type = MalwareSubject
    _binding_class = package_binding.MalwareSubjectListType
    _binding_var = "Malware_Subject"
    _namespace = maec.package._namespace