#MAEC Malware Subject Class

#Copyright (c) 2013, The MITRE Corporation
#All rights reserved.

#Compatible with MAEC v3.0
#Last updated 2/14/2013

import maec.bindings.maec_package_1_0 as package_binding

class Malware_Subject(object):
    def __init__(self, generator, malware_instance_object = None):
        self.generator = generator
        #Create the MAEC Subject object
        self.subject_obj = package_binding.MalwareSubjectType(id=self.generator.generate_malware_subject_id())
        #Set the Malware Instance Object Attributes (a CybOX object) if they are not none
        if malware_instance_object is not None:
            self.subject_obj.set_Malware_Instance_Object_Attributes(malware_instance_object)
        #Instantiate the lists
        self.analyses = package_binding.AnalysisListType()
        self.findings_bundles = package_binding.FindingsBundleListType()

    #Public methods
    #Set the Malware_Instance_Object_Attributes with a CybOX object
    def set_malware_instance_object_attributes(self, malware_instance_object):
        self.subject_obj.set_Malware_Instance_Object_Attributes(malware_instance_object)

    #Add an Analysis to the Analyses
    def add_analysis(self, analysis):
        self.analyses.add_Analysis(analysis)

    #Add a MAEC Bundle to the Findings Bundles
    def add_findings_bundle(self, findings_bundle):
        self.findings_bundles.add_Bundle(findings_bundle)

    #Build the Malware Subject from the input dictionary
    @classmethod
    def object_from_dict(cls, malware_subject_dict):
        for key, value in self.malware_subject_dict.items():
            pass

    @classmethod
    def dict_from_object(cls, malware_subject_obj):
        malware_subject_dict = {}
        pass

    #Get the Malware Subject
    def get(self):
        self.__build__()
        return self.subject_obj
    
    #Private methods

    #Build the Subject, adding any list or other items
    def __build__(self):
        if self.analyses.hasContent_():
            self.subject_obj.set_Analyses(self.analyses)
        if self.findings_bundles.hasContent_():
            self.subject_obj.set_Findings_Bundles(self.findings_bundles)

