#MAEC Malware Action Class

#Copyright (c) 2012, The MITRE Corporation
#All rights reserved.

#Compatible with MAEC v3.0
#Last updated 02/13/2013

import maec.bindings.maec_bundle_3_0 as bundle_binding
import cybox.utils as utils
from cybox.core.action import Action

class Malware_Action:
    def __init__(self):
        pass

    #Build the Action from the input dictionary
    @classmethod
    def object_from_dict(cls, malware_action_dict):
        action_obj = Action.object_from_dict(malware_action_dict, bundle_binding.MalwareActionType())
        for key, value in malware_action_dict.items():
            if key == 'implementation' : 
                action_obj.set_Implementation(cls.__implementation_object_from_dict(value))

        return action_obj

    #Parse the action into a dictionary
    @classmethod
    def dict_from_object(cls, action_attributes_dict = None):
        pass

    @classmethod
    def __implementation_object_from_dict(cls, implementation_dict):
        implementation_obj = bundle_binding.ActionImplementationType()
        for key, value in implementation_dict:
            if key == 'id' and utils.test_value(value) : implementation_obj.set_id(value)
            elif key == 'type' and utils.test_value(value): implementation_obj.set_type(value)
            elif key == 'compatible_platforms': pass
            elif key == 'api_call': 
                implementation_obj.set_API_Call(cls.__api_call_object_from_dict(value))
            elif key == 'code' : pass

    @classmethod
    def __implementation_dict_from_obj(cls, implementation_obj):
        pass

    @classmethod
    def __api_call_object_from_dict(cls, api_call_dict):
        api_call_obj = bundle_binding.APICallType()
        for key, value in api_call_dict:
            if key == 'function_name' and utils.test_value(value): api_call_obj.set_function_name(value)
            elif key == 'normalized_function_name' and utils.test_value(value): api_call_obj.set_normalized_function_name(value)
            elif key == 'address' and utils.test_value(value): api_call_obj.set_Address(value)
            elif key == 'return_value' and utils.test_value(value) : api_call_obj.set_Return_Value(value)
            elif key == 'parameters' :
                parameters_list = bundle_binding.ParametersListType()
                for paramater in value:
                    paramater_obj = bundle_binding.ParamaterType()
                    for paramater_key, parameter_value in parameter.items():
                        if parameter_key == 'ordinal_position' and utils.test_value(parameter_value) : parameter_obj.set_ordinal_position(parameter_value)
                        elif parameter_key == 'name' and utils.test_value(parameter_value) : parameter_obj.set_name(parameter_value)
                        elif parameter_key == 'value' and utils.test_value(parameter_value) : parameter_obj.set_value(parameter_value)
                    if parameter_obj.hasContent_() : parameters_list.add_Parameter(paramater_obj)
        return api_call_obj


    @classmethod
    def __api_call_dict_from_object(cls, api_call_obj):
        pass